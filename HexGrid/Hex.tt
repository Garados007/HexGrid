<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<# var types = new System.Collections.Generic.Dictionary<string, string>
    {
        ["int"] = "Int",
        ["float"] = "Float",
    };
#>
using System;

namespace HexGrid
{
<#  foreach (var (small, large) in types) { #>
    public readonly partial struct Hex<#= large #> : IEquatable<Hex<#= large #>>
    {
        public <#= small #> X { get; }

        public <#= small #> Y { get; }

        public <#= small #> Z { get; }

        public Hex<#= large #>(<#= small #> x, <#= small #> y, <#= small #> z)
            => (X, Y, Z) = (x, y, z);
        
        public override bool Equals(object obj)
        {
            return obj is Hex<#= large #> val && Equals(val);
        }

        public bool Equals(Hex<#= large #> other)
        {
            return X == other.X &&
                   Y == other.Y &&
                   Z == other.Z;
        }

        public override int GetHashCode()
        {
            return HashCode.Combine(X, Y, Z);
        }

        public (<#= small #> q, <#= small #> r) ToAxial()
            => (X, Z);

        public static Hex<#= large #> FromAxial(<#= small #> q, <#= small #> r)
            => new Hex<#= large #>(q, 0 - q - r, r);
        

        public static Hex<#= large #> FromAxial((<#= small #> q, <#= small #> r) p)
            => FromAxial(p.q, p.r);
        
        public (<#= small #> col, <#= small #> row) ToDoubled(DoubledCoordinateSystem system)
        {
            return system switch
            {
                DoubledCoordinateSystem.DoubleHeight => (X, 2 * Z + X),
                DoubledCoordinateSystem.DoubleWidth => (2 * X + Z, Z),
                _ => throw new NotImplementedException(),
            };
        }

        public static Hex<#= large #> FromDoubled(<#= small #> col, <#= small #> row, DoubledCoordinateSystem system)
        {
            return system switch
            {
                DoubledCoordinateSystem.DoubleHeight => FromAxial(col, (row - col) / 2),
                DoubledCoordinateSystem.DoubleWidth => FromAxial((col - row) / 2, row),
                _ => throw new NotImplementedException(),
            };
        }

        public static Hex<#= large #> FromDoubled((<#= small #> col, <#= small #> row) p, DoubledCoordinateSystem system)
            => FromDoubled(p.col, p.row, system);
                
        public Hex<#= large #> Negate()
            => new Hex<#= large #>(-X, -Y, -Z);
        
        public <#= small #> DistanceTo(Hex<#= large #> other)
            => (Math.Abs(X - other.X) + Math.Abs(Y - other.Y) + Math.Abs(Z - other.Z)) / 2;

        public static <#= small #> Distance(Hex<#= large #> left, Hex<#= large #> right)
            => left.DistanceTo(right);
        
        public static Hex<#= large #> Zero { get; }

        public static Hex<#= large #> operator +(Hex<#= large #> left, Hex<#= large #> right)
            => new Hex<#= large #>(left.X + right.X, left.Y + right.Y, left.Z + right.Z);

        public static Hex<#= large #> operator -(Hex<#= large #> left, Hex<#= large #> right)
            => new Hex<#= large #>(left.X - right.X, left.Y - right.Y, left.Z - right.Z);

        public static Hex<#= large #> operator -(Hex<#= large #> val)
            => val.Negate();

        public static Hex<#= large #> operator *(Hex<#= large #> val, <#= small #> scale)
            => new Hex<#= large #>(val.X * scale, val.Y * scale, val.Z * scale);
        
        public static Hex<#= large #> operator *(<#= small #> scale, Hex<#= large #> val)
            => val * scale;
        
        public static bool operator ==(Hex<#= large #> left, Hex<#= large #> right)
            => left.X == right.X && left.Y == right.Y && left.Z == right.Z;

        public static bool operator !=(Hex<#= large #> left, Hex<#= large #> right)
            => !(left == right);
    }
<# } #>
}